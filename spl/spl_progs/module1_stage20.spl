alias functionNo R1;
alias user_area_page R4;


// FREE USER AREA PAGE
if( functionNo == 2) then				
		backup;
		R1=2;
		R2=[PROCESS_TABLE + 16*R2 + 11];
		call MOD_2;
		restore;
		return;
endif;

//EXIT PROCESS
if( functionNo == 3) then				

		//FREE PAGE TABLE
		backup;
		R1=4;
		call MOD_1;
		restore;
		
		//FREE USER AREA PAGE
		backup;
		R1=2;
		call MOD_1;
		restore;
		[PROCESS_TABLE + 16*R2 + 9]=TERMINATED;
		return;
endif;

//FREE PAGE TABLE
if( functionNo == 4) then
		backup;			
		alias table R4;
		alias index R7;
		index=R2;
		table=PAGE_TABLE_BASE + 20*R2;
		[table+0]=-1;
		[table+1]="0000";
		[table+2]=-1;
		[table+3]="0000";		

		alias i R5;
		i = 4;
		while(i < 20) do
			if( [ table + i ] != -1 ) then 
				R1=2;
				R2=[ table + i ];
				call MOD_2;	
				[ table + i ]=-1;
				[ table + i + 1 ]="0000";
			endif;
		i=i+2;
		endwhile;
		i=2;
		while(i < 4) do
			if( [DISK_MAP_TABLE + 10*index + i ] != -1) then
			backup;
                        R1 = 4;
                        R2 = [DISK_MAP_TABLE + 10*index + i];
                        R3 = index;
                        call MOD_2;
                        restore;
			endif;
		i=i+1;
		endwhile;
		i=8;
		while(i < 10) do
			if( [DISK_MAP_TABLE + 10*index + i ] != -1) then
			backup;
                        R1 = 4;
                        R2 = [DISK_MAP_TABLE + 10*index + i];
                        R3 = index;
                        call MOD_2;
                        restore;
			endif;
		i=i+1;
		endwhile;
		
		i = 0;
		while(i < 10) do
			[DISK_MAP_TABLE + 10*index + i]=-1;
		i = i+1;
		endwhile;
		
		
		restore;
		return;
endif;


//GET PCB ENTRY
if( functionNo == 1) then
	alias i R4;
	i=0;
	while( i < 16) do
		if( [PROCESS_TABLE + i*16 + 4] == TERMINATED ) then
			R0=i;
			[PROCESS_TABLE + i*16 + 1] = i;
			[PROCESS_TABLE + i*16 + 4] = ALLOCATED;
			[PROCESS_TABLE + i*16 + 14] = PAGE_TABLE_BASE + 20*i;
			[PROCESS_TABLE + i*16 + 15] = 10;
			return;
		endif;
	i=i+1;
	endwhile;
	
	R0=-1;
	return;
endif;
	
			
			
 






























				
