

[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 5*CORE  + 1] * 16) + 13] = SP;

SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE  + 1] * 16) + 11] * 512 - 1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE +1] * 16 + 4] = READY;
backup;
R1=1;
call MOD_8;
restore;

backup;
alias i R0;
if ( [SYSTEM_STATUS_TABLE + 5] != 0) then

		if( (CORE == 0 ) && ([SYSTEM_STATUS_TABLE + 5*CORE  + 1] == 15) && ( [SYSTEM_STATUS_TABLE + 5] == 1 )) then
			
			
			
			backup;
			
			R1=1;
			R2=[SYSTEM_STATUS_TABLE + 5*CORE +1];
			call MOD_6;

			restore;
			
			

		else
		if( (CORE == 0 ) && ([SYSTEM_STATUS_TABLE + 5*CORE  + 1] == 15) && ( [SYSTEM_STATUS_TABLE + 5] == 2 )) then

			
			backup;
			
			R1=2;
			R2=[SYSTEM_STATUS_TABLE + 5*CORE +1];
			call MOD_6;

			restore;
			
		else
		if( [SYSTEM_STATUS_TABLE + 5*CORE  + 1] == 0) then

			
			i=0;
			while ( i < 16 ) do
				if ( [PROCESS_TABLE + 16*i + 4] != TERMINATED ) then
					[PROCESS_TABLE + 16*i]=[PROCESS_TABLE + 16*i] + 1;
				endif;
			i=i+1;
			endwhile;

			[KERN_LOCK]=0;
			
			backup;
			call MOD_5;
			restore;

			restore;

			SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE +1] * 16 + 13];
			[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE +1] * 16 + 9] = 0;


			ireturn;
			
			
		
		
		endif;
		
	endif;
	
		
endif;
	
else

		if ( [SYSTEM_STATUS_TABLE + 2] < MEM_LOW ) then
			[SYSTEM_STATUS_TABLE + 5]=1;

		else
	
		if ( [SYSTEM_STATUS_TABLE + 4] != 0 ) then
			
				if ( [SYSTEM_STATUS_TABLE + 2] > MEM_HIGH ) then
							[SYSTEM_STATUS_TABLE + 5]=2;

				endif;
			
	
		endif;
		

		endif;
endif;

i=0;
while ( i < 16 ) do
	if ( [PROCESS_TABLE + 16*i + 4] != TERMINATED ) then
		[PROCESS_TABLE + 16*i]=[PROCESS_TABLE + 16*i] + 1;
	endif;
	i=i+1;
endwhile;

[KERN_LOCK]=0;

backup;
call MOD_5;
restore;

restore;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE +1] * 16 + 13];
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE +1] * 16 + 9] = 0;
ireturn;


