alias functionNum R1;
alias currentPID R2;

//Terminal Write
if( functionNum== 3 ) then
	multipush(R1,R2,R3,R4,R5,R6);

	//Acquire Terminal
	R1=8;
	R2=[SYSTEM_STATUS_TABLE +1];
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6);
	print R3;
	multipush(R1,R2,R3,R4,R5,R6);
	
	//Release Terminal
	R1=9;
	R2=[SYSTEM_STATUS_TABLE +1];
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6);
	return;
endif;	


//Terminal Read
if( functionNum == 4 ) then
	backup;

	//Acquire Terminal
	R1=8;
	R2=[SYSTEM_STATUS_TABLE +1];
	call MOD_0;
	restore;
	
	read;
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 4]=WAIT_TERMINAL;
	
	backup;
	call MOD_5;
	restore;

	
	[[PTBR + (2*(R3/512))]*512 + (R3%512)] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 8];
	return;
endif;	



//Disk Load
if( functionNum == 2 ) then 

	backup;
	//Acquire Disk
	
	R1=3;
	R2=[SYSTEM_STATUS_TABLE +1];
	call MOD_0;
	restore;
	
	//Status
	[DISK_STATUS_TABLE]=1;
	
	//PID
	[DISK_STATUS_TABLE+4] = currentPID;
	
	//Load or Store
	[DISK_STATUS_TABLE +1]=0;
	
	//Page Number is Argument R3
	[DISK_STATUS_TABLE+2] = R3;
	
	//Block Number is Argument R4
        [DISK_STATUS_TABLE+3] = R4;
        
	
	load(R3,R4);
	
	
	[PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
	backup;
	call MOD_5;
	restore;
	return;
endif;















