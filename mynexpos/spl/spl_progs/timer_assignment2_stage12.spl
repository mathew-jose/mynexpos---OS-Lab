breakpoint;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
backup;
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];
alias process_table R1;
process_table = PROCESS_TABLE + currentPID * 16;


//KPTR has offset of the kernel stack pointer within the User Area Page
[process_table + 12] = SP % 512;
[process_table + 14] = PTBR;
[process_table + 15] = PTLR;
[process_table + 4] = READY;

//Toggle between Processes of PID 1 and 0
alias newPID R2;
if(currentPID == 0) then
	newPID = 1;
else
	newPID = 0;
endif;


//Find New Process Table
alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID * 16;

//Set back Kernel SP, PTBR , PTLR
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];


//Set PID of SYSTEM_STATUS_TABLE
[SYSTEM_STATUS_TABLE + 1] = newPID;


if([new_process_table + 4] == CREATED) then
	[new_process_table + 4] = RUNNING;
	SP = [new_process_table + 13];
	ireturn;
endif;

[new_process_table + 4] = RUNNING;


restore;
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
breakpoint;
ireturn;


