alias userSP R0;
userSP = SP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 +13]=SP;
SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 +11]*512 - 1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 +9]=9;
alias filename R1;
filename=[ [PTBR + 2*(userSP-4)/512]*512 + (userSP-4)%512 ];

alias index R8;
index=0;


//MAX_FILE_NUM=60


while( index < 60 ) do 
	if( [INODE_TABLE + 16*index + 1] == filename ) then
		if( [INODE_TABLE + 16*index + 0] == EXEC ) then
			break;
		endif;
	endif;
index=index+1;
endwhile;

if( index == 60) then
	[ [PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512 ]=-1;
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 +9]=0;
	SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 +13];
	ireturn;
endif;
[ [PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512 ]=-1;
backup;
	R1=3;
	R2=[SYSTEM_STATUS_TABLE +1];
	call MOD_1;
restore;
alias user_area_page R3;
user_area_page=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 +11];
[MEMORY_FREE_LIST + user_area_page] = [MEMORY_FREE_LIST + user_area_page] + 1;
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
SP=user_area_page*512 -1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 7] = index;

PTBR= PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE +1];
//Library
[PTBR+ 0] = 63;
[PTBR+ 1] = "0100";
[PTBR+ 2] = 64;
[PTBR+ 3] = "0100";


R1=1;
R2=[SYSTEM_STATUS_TABLE+1];

call  MOD_2;
[PTBR+ 4] = R0;
[PTBR+ 5] = "0110";

call  MOD_2;
[PTBR+ 6] = R0;
[PTBR+ 7] = "0110";


call  MOD_2;
[PTBR+ 16] = R0;
[PTBR+ 17] = "0110";


call  MOD_2;
[PTBR+ 18] = R0;
[PTBR+ 19] = "0110";		 



if([INODE_TABLE+ index*16 + 8 + 0]!=-1) then
	R1=1;
	call  MOD_2;
	[PTBR+ 8] = R0;
	[PTBR+ 9] = "0100";	
	loadi([PTBR+8],[INODE_TABLE + index*16 + 8]);
else
	[PTBR+ 8] = -1;
	[PTBR+ 9] = "0000";	
endif;

if([INODE_TABLE + index*16 + 8 + 1]!=-1) then
	R1=1;
	call  MOD_2;
	[PTBR+ 10] = R0;
	[PTBR+ 11] = "0100";	
	print(R0);
	loadi([PTBR+10],[INODE_TABLE + index*16 + 8 + 1]);
else
	[PTBR+ 10] = -1;
	[PTBR+ 11] = "0000";	
endif;


if([INODE_TABLE + index*16 + 8 + 2]!=-1) then
	R1=1;
	call  MOD_2;
	[PTBR+ 12] = R0;
	[PTBR+ 13] = "0100";	
	loadi([PTBR+12],[INODE_TABLE + index*16 + 8 + 2]);
else
	[PTBR+ 12] = -1;
	[PTBR+ 13] = "0000";	
endif;

if([INODE_TABLE + index*16 + 8 + 3]!=-1) then
	R1=1;
	call  MOD_2;
	[PTBR+ 14] = R0;
	[PTBR+ 15] = "0100";	
	loadi([PTBR+14],[INODE_TABLE + index*16 + 8 + 3]);
else
	[PTBR+ 14] = -1;
	[PTBR+ 15] = "0000";	
endif;

[ [PTBR+16]*512 ] = [ [PTBR+8]*512+1 ];
SP = 8*512;
ireturn;




















