alias functionNo R1;

//Open Function

if( functionNo == 3 ) then
alias file R2;
alias i R3;

i=0;

	while( i < MAX_FILE_NUM ) do
		if ( [INODE_TABLE + 16*i + 1] == file) then
			break;
		endif; 
	i=i+1;
	endwhile;
	if ( i == MAX_FILE_NUM ) then
		R0=-1;
		return;	
	endif;


	backup;
	R1=4;
	R2=[SYSTEM_STATUS_TABLE +1];
	R3=i;
	call MOD_0;

	if(R0 == -1) then
		restore;
		return;
	endif; 
	restore;
	
	if( [INODE_TABLE + 16*i] == EXEC ) then
		multipush(R1,R2,R3,R4,R5);	
		R1=5;
		R2=[SYSTEM_STATUS_TABLE +1];
		R3=i;
		call MOD_0;
		multipop(R1,R2,R3,R4,R5);
		R0=-1;
		return;
	endif;

	alias j R4;
	j=0;
	while ( j < MAX_OPENFILE_NUM) do
		if ( [OPEN_FILE_TABLE + 4*j ] == -1 ) then
			break;
		endif;
	j=j+1;
	endwhile;
	
	if( j == MAX_OPENFILE_NUM ) then
		multipush(R1,R2,R3,R4,R5);	
		R1=5;
		R2=[SYSTEM_STATUS_TABLE +1];
		R3=i;
		call MOD_0;
		multipop(R1,R2,R3,R4,R5);
		R0=-2;
		return;
	endif;
	

	if ( file == "root" ) then
		[OPEN_FILE_TABLE + 4*j]= INODE_ROOT;
	else
		if([FILE_STATUS_TABLE + 4*i + 1] == -1 ) then
			[FILE_STATUS_TABLE + 4*i + 1] = 1;
		else
			[FILE_STATUS_TABLE + 4*i + 1] = [FILE_STATUS_TABLE + 4*i + 1] + 1;
		endif;
		[OPEN_FILE_TABLE + 4*j]=i;
	endif;	
	
	[OPEN_FILE_TABLE + 4*j + 1]=1;
	[OPEN_FILE_TABLE + 4*j + 2]=0;
	
	multipush(R1,R2,R3,R4,R5);	
	R1=5;
	R2=[SYSTEM_STATUS_TABLE +1];
	R3=i;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5);	

	R0=j;
	return;

endif;




if( functionNo == 4 ) then
alias j R2;
alias i R3;
alias k R4;
	
	i=[OPEN_FILE_TABLE + 4*j];
	[OPEN_FILE_TABLE + 4*j + 1] = [OPEN_FILE_TABLE + 4*j + 1] -1;

	if( [OPEN_FILE_TABLE + 4*j + 1] == 0 ) then 
	
		k=0;
		while( k < 4 ) do
			[OPEN_FILE_TABLE + 4*j + k] = -1; 
		k=k+1;
		endwhile;
		
		if( [INODE_TABLE + 16*i + 1] != "root" ) then
			[FILE_STATUS_TABLE + 4*i + 1] = [FILE_STATUS_TABLE + 4*i + 1] - 1;
		endif;
		
		if ( [FILE_STATUS_TABLE + 4*i + 1] == 0 ) then
		
			[FILE_STATUS_TABLE + 4*i + 1]=-1;
		endif; 
	
	endif;
	return;

endif;


//Buffered Read
if ( functionNo == 2 ) then
	alias buff_no R5;
	alias block R6;

	R6=R2;
	buff_no = block%4;

	backup;
	R1=1;
	R2=[SYSTEM_STATUS_TABLE + 1];
	R3=buff_no;
	call MOD_0;
	restore;
	//buff_no = R2%4;
	
	

	if ([BUFFER_TABLE + 4*buff_no] != R2 ) then
		if( [BUFFER_TABLE + 4*buff_no + 1]  == 1 )  then
			backup;
			R1=1;
			R2=[SYSTEM_STATUS_TABLE + 1];
			R3= 71 + buff_no; 
			R4=[BUFFER_TABLE + 4*buff_no];
			call MOD_4;
			restore;
			[BUFFER_TABLE + 4*buff_no + 1] = 0;
		endif;
	backup;
			

			R1=2;
			R2=[SYSTEM_STATUS_TABLE + 1];
			R3= 71 + buff_no; 
			R4=block;
			call MOD_4;
	restore;
	
	

	endif;
	[BUFFER_TABLE + 4*buff_no]=block;
	
	
	
	[R4]=[(71 + buff_no)*512 + R3];
	
	backup;
	R1=2;
	R2=[SYSTEM_STATUS_TABLE + 1];
	R3=buff_no;
	call MOD_0;
	restore;
	return;
endif;


//Buffered Write
if ( functionNo == 1 ) then
	alias buff_no R5;
	alias block R6;

	R6=R2;
	buff_no = block%4;	
	backup;
	R1=1;
	R2=[SYSTEM_STATUS_TABLE + 1];
	R3=buff_no;
	call MOD_0;
	restore;
	

	if ([BUFFER_TABLE + 4*buff_no] != R2 ) then

		if( [BUFFER_TABLE + 4*buff_no + 1] == 1 )  then

			backup;
			R1=1;
			R2=[SYSTEM_STATUS_TABLE + 1];
			R3= 71 + buff_no; 
			R4=[BUFFER_TABLE + 4*buff_no];
			call MOD_4;
			restore;
			
			[BUFFER_TABLE + 4*buff_no + 1] = 0;
		endif;
	backup;
			
			R1=2;
			R2=[SYSTEM_STATUS_TABLE + 1];
			R3= 71 + buff_no; 
			R4=block;
			call MOD_4;
			
	restore;
	
	
	[BUFFER_TABLE + 4*buff_no]=block;
	endif;
	
	
	[(71 + buff_no)*512 + R3]=R4;
	[BUFFER_TABLE + 4*buff_no + 1]=1;
	
	
	
	backup;
	
	R1=2;
	R2=[SYSTEM_STATUS_TABLE + 1];
	R3=buff_no;
	call MOD_0;
	restore;
	return;
endif;

























